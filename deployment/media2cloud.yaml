AWSTemplateFormatVersion: "2010-09-09"

Description: (SO0050) Media2Cloud - the solution is designed to demonstrate a serverless ingest framework that can quickly setup a baseline ingest workflow for placing video assets and associated metadata under management control of an AWS customer.

#
# Mappings to store static value of the solution
#
Mappings:
    Layer:
        AwsSdkLib:
            Package: "%LAYER_AWSSDK%"
            Name: "aws-sdk-lib"
        CoreLib:
            Package: "%LAYER_CORE_LIB%"
            Name: "core-lib"
        CanvasLib:
            Package: "%LAYER_CANVAS_LIB%"
            Name: "canvas-lib"
    Solution:
        Project:
            Id: SO0050
            Version: "%VERSION%"
        Template:
            S3Bucket: "%BUCKET%"
            KeyPrefix: "%KEYPREFIX%"
            SingleRegion: "%SINGLE_REGION%"
            IngestWorkflow: "media2cloud-ingest-stack.template"
            AnalysisWorkflow: "media2cloud-analysis-stack.template"
            ServiceBacklog: "media2cloud-service-backlog-stack.template"
        Package:
            CustomResourceX: "%PKG_CUSTOM_RESOURCES%"
        SNS:
            DisplayName: M2CStatus
        APIGateway:
            StageName: demo
    Workflow:
        Main:
            Name: "main"
        ErrorHandler:
            Package: "%PKG_ERROR_HANDLER%"
            Name: "error-handler"
    S3:
        CORS:
            AllowedOrigins: "*"
            AllowedMethods: "GET,PUT,POST,HEAD,DELETE"
            AllowedHeaders: "*"
            ExposeHeaders: "Content-Length,ETag,x-amz-meta-uuid,x-amz-meta-md5"
            MaxAgeSeconds: 3000
    AIML:
        Options:
            MinConfidence: 80
    # UserDefined allows you to customize the solution to specify your own buckets to use for ingest and proxy
    # * Change Ingest to your own ingest bucket name
    # * Change Proxy to your own proxy bucket name
    UserDefined:
        Bucket:
            Ingest: ""
            Proxy: ""
    # To opt out sending anonymous data, set Data to "No"
    AnonymousData:
        SendAnonymousData:
            Data: "%ANONYMOUS_DATA%"
    Node:
        Runtime:
            Version: nodejs14.x

Parameters:
    # Elasticsearch
    ElasticsearchCluster:
        Type: String
        Description: "configure Amazon Elasticsearch cluster"
        Default: Development and Testing (t3.small=0,m5.large=1,volume=10,az=1)
        AllowedValues:
            - Development and Testing (t3.small=0,m5.large=1,volume=10,az=1)
            - Suitable for Production Workload (t3.small=3,m5.large=2,volume=20,az=2)
            - Recommended for Production Workload (t3.small=3,m5.large=4,volume=20,az=2)
            - Recommended for Large Production Workload (t3.small=3,m5.large=6,volume=40,az=3)
    # AI/ML Settings
    AIOptions:
        Type: String
        Description: enable analysis features
        Default: Default (celeb,label,segment,transcribe,keyphrase,entity,textract)
        AllowedValues:
            - Default (celeb,label,segment,transcribe,keyphrase,entity,textract)
            - All (celeb,face,facematch,label,moderation,person,text,segment,transcribe,keyphrase,entity,sentiment,textract)
            - Video analysis (celeb,face,facematch,label,moderation,person,text,segment)
            - Audio analysis (transcribe,keyphrase,entity)
            - Image analysis (celeb,face,facematch,label,moderation,text)
            - Document analysis (textract)
            - Celebrity recognition only (celeb)
            - Video segment detection only (segment)
            - Speech to text only (transcribe)
    # SNS / Cognito parameters
    Email:
        Type: String
        Description: "Email address of the user that will be created in the Amazon Cognito Identity Pool and subscribed to the Amazon SNS topic. Subscribed users will receive ingest, publishing, and error notifications. After launch, two emails will be sent to this address: one with instructions for logging in to the web interface and one confirming the SNS subscription."
        AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    # CloudFront / Website
    PriceClass:
        Type: String
        Description: "Specify the price class of the edge location from which CloudFront serves your requests. For more information, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html"
        AllowedValues:
            - Use Only U.S., Canada and Europe [PriceClass_100]
            - Use U.S., Canada, Europe, Asia and Africa [PriceClass_200]
            - Use All Edge Locations (Best Performance) [PriceClass_All]
        Default: Use Only U.S., Canada and Europe [PriceClass_100]

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "Amazon Cognito / SNS Configuration"
                Parameters:
                    - Email
            -
                Label:
                    default: "Amazon S3 / CloudFront Configuration"
                Parameters:
                    - PriceClass
            -
                Label:
                    default: "Media Analysis Configuration"
                Parameters:
                    - ElasticsearchCluster
                    - AIOptions
        ParameterLabels:
            PriceClass:
                default: "Price Class"
            ElasticsearchCluster:
                default: "Elasticsearch Cluster"
            AIOptions:
                default: "Analysis Feature(s)"
            Email:
                default: "Email"

Conditions:
    bEmail: !Not [
        !Equals [
            !Ref Email,
            ""
        ]
    ]
    bSingleRegion: !Equals [
        !FindInMap [
            "Solution",
            "Template",
            "SingleRegion"
        ],
        "true"
    ]

Resources:
    ################################################################################
    #
    # Create custom resource lambda
    #
    ################################################################################
    CustomResourceExecutionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: F38
                        reason: "cognito.CreateGroup needs iam:PassRole permission"
                    -
                        id: W11
                        reason: "This wildcard is present as the custom resource lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${AWS::StackName}-custom-resources", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "Id"
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:DeleteObject"
                                - "s3:GetObject"
                                - "s3:GetObjectAcl"
                                - "s3:GetObjectTagging"
                                - "s3:PutObject"
                                - "s3:PutObjectAcl"
                                - "s3:PutObjectTagging"
                            # This wildcard is present because of circular dependency where
                            # the buckets aren't known before this custom resource lambda function
                            # is created.
                            Resource: !Join ["", ["arn:aws:s3:::", "*/*"]]
                        ## S3.GetBucketLoction to check bucket availability
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:ListAllMyBuckets"
                                - "s3:GetBucketLocation"
                                - "s3:GetAccelerateConfiguration"
                                - "s3:GetBucketCORS"
                                - "s3:GetBucketNotification"
                                - "s3:GetBucketPolicy"
                                - "s3:GetBucketTagging"
                                - "s3:GetEncryptionConfiguration"
                                - "s3:GetLifecycleConfiguration"
                                - "s3:ListBucket"
                                - "s3:PutAccelerateConfiguration"
                                - "s3:PutBucketCORS"
                                - "s3:PutBucketNotification"
                                - "s3:PutBucketPolicy"
                                - "s3:PutBucketTagging"
                                - "s3:PutEncryptionConfiguration"
                                - "s3:PutLifecycleConfiguration"
                            # This wildcard is present as we need access to check bucket
                            # availability
                            Resource: !Join ["", ["arn:aws:s3:::", "*"]]
                        ## MediaConvert
                        -
                            Effect: "Allow"
                            Action: "mediaConvert:DescribeEndpoints"
                            # This wildcard is present because the MediaConvert job
                            # IDs are randomly generated.
                            Resource: !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:*"
                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        ## DynamoDB
                        -
                            Effect: "Allow"
                            Action:
                                - "dynamodb:DeleteItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:PutItem"
                                - "dynamodb:UpdateItem"
                                - "dynamodb:Attributes"
                                - "dynamodb:LeadingKeys"
                                - "dynamodb:ReturnConsumedCapacity"
                                - "dynamodb:ReturnValues"
                                - "dynamodb:Select"
                            # The wildcard is presented as DynamoDB table names are yet to be determined
                            Resource: [
                                !Sub [
                                    "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${x0}-*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "Id"
                                        ]
                                    }
                                ]
                            ]
                        ## IoT
                        -
                            Effect: "Allow"
                            Action: "iot:Publish"
                            # The wildcard is needed for the custom resource as Iot resources isn't created at the time
                            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*"
                        -
                            Effect: "Allow"
                            Action: "iot:ListTargetsForPolicy"
                            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:policy/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "iot:AttachPolicy"
                                - "iot:DetachPolicy"
                            # This wildcard is present because we are attaching Cognito Identity Id
                            # cert/* and thinggroup/* resources won't work!
                            # resource. See details on https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awsiot.html
                            Resource: !Join ["", ["*"]]
                        -
                            Effect: "Allow"
                            Action: "iot:DescribeEndpoint"
                            # This wildcard is present because iot:DescribeEndpoint doesn't take
                            # resource. See details on https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awsiot.html
                            Resource: !Join ["", ["*"]]

                        ## SNS
                        -
                            Effect: "Allow"
                            Action:
                                - "sns:GetSubscriptionAttributes"
                                - "sns:GetTopicAttributes"
                                - "sns:ListSubscriptionsByTopic"
                                - "sns:ListTopics"
                                - "sns:SetSubscriptionAttributes"
                                - "sns:SetTopicAttributes"
                                - "sns:Subscribe"
                                - "sns:Unsubscribe"
                            # This wildcard is present because the SNS topic is not known
                            # before this custom resource lambda function is created.
                            Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
                        ## Lambda
                        -
                            Effect: "Allow"
                            # permission to update lambda environment variables
                            Action:
                                - "lambda:GetFunctionConfiguration"
                                - "lambda:UpdateFunctionConfiguration"
                            # This wildcard is present as the lambda function yet to be created.
                            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                        ## Cognito
                        -
                            Effect: "Allow"
                            # permission to update cognito user attribute
                            Action: "cognito-idp:AdminUpdateUserAttributes"
                            # This wildcard is present as cognito userpool yet to be created.
                            Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                        -
                            Effect: "Allow"
                            # permission to create/delete user pool domain
                            Action:
                                - "cognito-idp:AdminCreateUser"
                                - "cognito-idp:CreateGroup"
                                - "cognito-idp:CreateUserPool"
                                - "cognito-idp:CreateUserPoolClient"
                                - "cognito-idp:DeleteGroup"
                                - "cognito-idp:DeleteUserPool"
                                - "cognito-idp:DeleteUserPoolClient"
                                - "cognito-idp:DescribeUserPool"
                                - "cognito-idp:DescribeUserPoolClient"
                                - "cognito-idp:UpdateUserPool"
                                - "cognito-idp:UpdateUserPoolClient"
                            # This wildcard is present as cognito userpool yet to be created.
                            Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "cognito-idp:CreateUserPoolDomain"
                                - "cognito-idp:DeleteUserPoolDomain"
                                - "cognito-idp:DescribeUserPoolDomain"
                            Resource: !Join ["", ["*"]]
                        ## SageMaker
                        -
                            Effect: "Allow"
                            # permission to create / delete workteam
                            Action:
                                - "sagemaker:CreateWorkteam"
                                - "sagemaker:DeleteWorkteam"
                                - "sagemaker:DescribeWorkteam"
                            # This wildcard is present as workteam yet to be created.
                            Resource: !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:workteam/*"
                        -
                            # permission to list work teams
                            Effect: "Allow"
                            Action: "sagemaker:ListWorkteams"
                            # This wildcard is present here because sagemaker:ListWorkteams requires wildcard.
                            Resource: !Join ["", ["*"]]
                        ## IAM
                        -
                            Effect: "Allow"
                            # allow custom resource to pass IAM role during cognito.CreateGroup
                            Action: "iam:PassRole"
                            Resource: !Join ["", ["*"]]
                        ## Rekognition
                        -
                            Effect: "Allow"
                            Action:
                                - "rekognition:CreateCollection"
                                - "rekognition:DeleteCollection"
                            Resource: !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/*"
                        ## Transcribe
                        -
                            Effect: "Allow"
                            Action:
                                - "transcribe:CreateVocabulary"
                                - "transcribe:DeleteVocabulary"
                                - "transcribe:GetVocabulary"
                            Resource: !Join ["", ["*"]]

                        ## Elasticsearch (to create index document)
                        -
                            Effect: "Allow"
                            Action:
                                - "es:ESHttpGet"
                                - "es:ESHttpPost"
                                - "es:ESHttpPut"
                                - "es:ESHttpPost"
                                - "es:ESHttpDelete"
                            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*/*"
                        ## CloudFormation
                        -
                            Effect: "Allow"
                            Action: "cloudformation:DescribeStacks"
                            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"

    CustomResourceFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: !Sub [
                "(${x0}) custom resources", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 128
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt CustomResourceExecutionRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Package",
                            "CustomResourceX"
                        ]
                    }
                ]

    ################################################################################
    #
    # Sanitized stack name first, convert 
    #
    ################################################################################
    SanitizedStackName:
        Type: Custom::StringManipulation
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                InputString: !Ref AWS::StackName
                Operations: "alphanumeric,lower,maxlen=25"
                OutputReference: SanitizedStackName

    ################################################################################
    #
    # Generate random solution UUID
    #
    ################################################################################
    CreateSolutionUuid:
        Type: Custom::CreateSolutionUuid
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn

    ################################################################################
    #
    # Create random unique name to prefix resources
    #
    ################################################################################
    RandomizedName:
      Type: Custom::StringManipulation
      Properties:
        ServiceToken: !GetAtt CustomResourceFunction.Arn
        Data:
            InputString: !Sub [
                "${x0}-${SanitizedStackName.OutputString}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            Operations: "lower,minlen=3,maxlen=63,dash,random=12"
            OutputReference: RandomizedName

    ################################################################################
    #
    # Lambda layers, shared among other stacks
    # * AwsSdkLayer
    # * CoreLibLayer
    # * CanvasLibLayer
    #
    ################################################################################
    AwsSdkLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ],
                    x1: !FindInMap [
                        "Layer",
                        "AwsSdkLib",
                        "Name"
                    ]
                }
            ]
            CompatibleRuntimes:
                - nodejs10.x
                - nodejs12.x
                - nodejs14.x
            Content:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Layer",
                            "AwsSdkLib",
                            "Package"
                        ]
                    }
                ]
            Description: !Sub [
                "(${x0}) ${AWS::StackName} aws-sdk Layer", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            LicenseInfo: Apache-2.0

    CoreLibLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ],
                    x1: !FindInMap [
                        "Layer",
                        "CoreLib",
                        "Name"
                    ]
                }
            ]
            CompatibleRuntimes:
                - nodejs10.x
                - nodejs12.x
                - nodejs14.x
            Content:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Layer",
                            "CoreLib",
                            "Package"
                        ]
                    }
                ]
            Description: !Sub [
                "(${x0}) ${AWS::StackName} M2C Core Library Layer", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            LicenseInfo: MIT

    CanvasLibLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ],
                    x1: !FindInMap [
                        "Layer",
                        "CanvasLib",
                        "Name"
                    ]
                }
            ]
            CompatibleRuntimes:
                - nodejs14.x
            Content:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Layer",
                            "CanvasLib",
                            "Package"
                        ]
                    }
                ]
            Description: !Sub [
                "(${x0}) Node Canvas Layer", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            LicenseInfo: MIT

    ################################################################################
    #
    # Bucket stack
    #
    ################################################################################
    BucketStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub [
                "https://${x0}${x1}.s3.amazonaws.com/${x2}/media2cloud-bucket-stack.template", {
                    x0: !FindInMap [
                        "Solution",
                        "Template",
                        "S3Bucket"
                    ],
                    x1: !If [
                        bSingleRegion,
                        "",
                        !Sub "-${AWS::Region}"
                    ],
                    x2: !FindInMap [
                        "Solution",
                        "Template",
                        "KeyPrefix"
                    ]
                }
            ]
            Parameters:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                KeyPrefix: !FindInMap [
                    "Solution",
                    "Template",
                    "KeyPrefix"
                ]
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                SolutionUuid: !GetAtt CreateSolutionUuid.Uuid
                AnonymousUsage: !FindInMap [
                    "AnonymousData",
                    "SendAnonymousData",
                    "Data"
                ]
                RootStackName: !GetAtt SanitizedStackName.OutputString
                BucketPrefix: !Sub "${RandomizedName.OutputString}"
                CustomResourceArn: !GetAtt CustomResourceFunction.Arn
                SNSTopicArn: !Ref SNSTopic
                # Iot
                IotHost: !GetAtt IotUrl.Endpoint
                IotTopic: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}/status", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                # layers
                AwsSdkLayer: !Ref AwsSdkLayer
                CoreLibLayer: !Ref CoreLibLayer
                # User-defined parameters
                UserDefinedIngestBucket: !FindInMap [
                    "UserDefined",
                    "Bucket",
                    "Ingest"
                ]
                UserDefinedProxyBucket: !FindInMap [
                    "UserDefined",
                    "Bucket",
                    "Proxy"
                ]

    ################################################################################
    #
    # Web App related resources
    #
    ################################################################################
    WebAppStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub [
                "https://${x0}${x1}.s3.amazonaws.com/${x2}/media2cloud-webapp-stack.template", {
                    x0: !FindInMap [
                        "Solution",
                        "Template",
                        "S3Bucket"
                    ],
                    x1: !If [
                        bSingleRegion,
                        "",
                        !Sub "-${AWS::Region}"
                    ],
                    x2: !FindInMap [
                        "Solution",
                        "Template",
                        "KeyPrefix"
                    ]
                }
            ]
            Parameters:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                KeyPrefix: !FindInMap [
                    "Solution",
                    "Template",
                    "KeyPrefix"
                ]
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                RootStackName: !GetAtt SanitizedStackName.OutputString
                CustomResourceArn: !GetAtt CustomResourceFunction.Arn
                LogsBucket: !GetAtt BucketStack.Outputs.LogsBucket
                WebBucket: !GetAtt BucketStack.Outputs.WebBucket
                PriceClass: !Select [
                    0,
                    !Split [
                        "]",
                        !Select [
                            1,
                            !Split [
                                "[",
                                !Ref PriceClass
                            ]
                        ]
                    ]
                ]

    #
    # update ingest bucket CORS
    #
    UpdateIngestBucketCORS:
        Type: Custom::SetCORS
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                Bucket: !GetAtt BucketStack.Outputs.IngestBucket
                AllowedOrigins:
                    - !GetAtt WebAppStack.Outputs.WebsiteUrl
                AllowedMethods: !Split [
                    ",",
                    !FindInMap [
                        "S3",
                        "CORS",
                        "AllowedMethods"
                    ]
                ]
                AllowedHeaders: !Split [
                    ",",
                    !FindInMap [
                        "S3",
                        "CORS",
                        "AllowedHeaders"
                    ]
                ]
                ExposeHeaders: !Split [
                    ",",
                    !FindInMap [
                        "S3",
                        "CORS",
                        "ExposeHeaders"
                    ]
                ]
                MaxAgeSeconds: !FindInMap [
                    "S3",
                    "CORS",
                    "MaxAgeSeconds"
                ]

    #
    # update proxy bucket CORS
    #
    UpdateProxyBucketCORS:
        Type: Custom::SetCORS
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                Bucket: !GetAtt BucketStack.Outputs.ProxyBucket
                AllowedOrigins:
                    - !GetAtt WebAppStack.Outputs.WebsiteUrl
                AllowedMethods: !Split [
                    ",",
                    !FindInMap [
                        "S3",
                        "CORS",
                        "AllowedMethods"
                    ]
                ]
                AllowedHeaders: !Split [
                    ",",
                    !FindInMap [
                        "S3",
                        "CORS",
                        "AllowedHeaders"
                    ]
                ]
                ExposeHeaders: !Split [
                    ",",
                    !FindInMap [
                        "S3",
                        "CORS",
                        "ExposeHeaders"
                    ]
                ]
                MaxAgeSeconds: !FindInMap [
                    "S3",
                    "CORS",
                    "MaxAgeSeconds"
                ]

    #
    # Post-processing - update solution-manifest.js in web content bucket
    #
    UpdateManifest:
        Type: Custom::UpdateManifest
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                Version: !FindInMap [
                    "Solution",
                    "Project",
                    "Version"
                ]
                StackName: !GetAtt SanitizedStackName.OutputString
                Region: !Ref AWS::Region
                LastUpdated: !GetAtt WebAppStack.Outputs.LastUpdated
                Web:
                    Bucket: !GetAtt BucketStack.Outputs.WebBucket
                Cognito:
                    UserPoolId: !Ref UserPool
                    ClientId: !Ref AppClient
                    IdentityPoolId: !Ref IdentityPool
                    RedirectUri: !GetAtt WebAppStack.Outputs.WebsiteUrl
                S3:
                    UseAccelerateEndpoint: !GetAtt BucketStack.Outputs.UseAccelerateEndpoint
                StateMachines:
                    Main: !GetAtt MainStateMachine.Name
                    Ingest: !GetAtt IngestWorkflowStack.Outputs.MainStateMachineName
                    Analysis: !GetAtt AnalysisWorkflowStack.Outputs.MainStateMachineName
                ApiEndpoint: !GetAtt Media2CloudApiGatewayStack.Outputs.Endpoint
                IotHost: !GetAtt IotUrl.Endpoint
                IotTopic: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}/status", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                Ingest:
                    Bucket: !GetAtt BucketStack.Outputs.IngestBucket
                Proxy:
                    Bucket: !GetAtt BucketStack.Outputs.ProxyBucket
                AIML:
                    Detections: !Split [
                        ",",
                        !Select [
                            0,
                            !Split [
                                ")",
                                !Select [
                                    1,
                                    !Split [
                                        "(",
                                        !Ref AIOptions
                                    ]
                                ]
                            ]
                        ]
                    ]
                    MinConfidence: !FindInMap [
                        "AIML",
                        "Options",
                        "MinConfidence"
                    ]

    ################################################################################
    #
    # Search engine stack
    #
    ################################################################################
    SearchEngineStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub [
                "https://${x0}${x1}.s3.amazonaws.com/${x2}/media2cloud-search-engine-stack.template", {
                    x0: !FindInMap [
                        "Solution",
                        "Template",
                        "S3Bucket"
                    ],
                    x1: !If [
                        bSingleRegion,
                        "",
                        !Sub "-${AWS::Region}"
                    ],
                    x2: !FindInMap [
                        "Solution",
                        "Template",
                        "KeyPrefix"
                    ]
                }
            ]
            Parameters:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                KeyPrefix: !FindInMap [
                    "Solution",
                    "Template",
                    "KeyPrefix"
                ]
                RootStackName: !GetAtt SanitizedStackName.OutputString
                CustomResourceArn: !GetAtt CustomResourceFunction.Arn
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                SolutionUuid: !GetAtt CreateSolutionUuid.Uuid
                Version: !FindInMap [
                    "Solution",
                    "Project",
                    "Version"
                ]
                ElasticsearchCluster: !Ref ElasticsearchCluster
                AnonymousUsage: !FindInMap [
                    "AnonymousData",
                    "SendAnonymousData",
                    "Data"
                ]

    ################################################################################
    #
    # SNS related resources
    #
    ################################################################################
    #
    # create sns topic / notification
    #
    SNSTopic:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            DisplayName: !FindInMap [
                "Solution",
                "SNS",
                "DisplayName"
            ]
            KmsMasterKeyId: "alias/aws/sns"

    SNSTopicPolicy:
        Type: AWS::SNS::TopicPolicy
        Properties:
            Topics:
                - !Ref SNSTopic
            PolicyDocument:
                Id: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}-sns-policy", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                Version: "2012-10-17"
                Statement:
                    -
                        Sid: "allow-lambda-publish"
                        Effect: "Allow"
                        Principal:
                            Service: "lambda.amazonaws.com"
                        Action: "sns:Publish"
                        Resource: !Ref SNSTopic

    ## run EmailSubscribe to subscribe emails to SNS topic
    EmailSubscribeFunction:
        DependsOn: UpdateManifest
        Condition: bEmail
        Type: Custom::EmailSubscribe
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                TopicArn: !Ref SNSTopic
                EmailList: !Split [
                    ",",
                    !Ref Email
                ]

    ################################################################################
    #
    # Iot related resources
    #
    ################################################################################
    IotUrl:
        Type: Custom::IotEndpoint
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn

    IotThing:
        Type: AWS::IoT::Thing
        Properties:
            ThingName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-thing", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]

    IotThingPolicy:
        Type: AWS::IoT::Policy
        Properties:
            PolicyName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-thing-policy", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - "iot:Connect"
                        Resource:
                            - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*"
                    -
                        Effect: Allow
                        Action:
                            - "iot:Subscribe"
                        Resource:
                            - !Sub [
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${x0}-${SanitizedStackName.OutputString}/status", {
                                    x0: !FindInMap [
                                        "Solution",
                                        "Project",
                                        "Id"
                                    ]
                                }
                            ]
                    -
                        Effect: Allow
                        Action:
                            - "iot:Publish"
                            - "iot:Receive"
                        Resource:
                            - !Sub [
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${x0}-${SanitizedStackName.OutputString}/status", {
                                    x0: !FindInMap [
                                        "Solution",
                                        "Project",
                                        "Id"
                                    ]
                                }
                            ]

    IotDetachPolices:
        Type: Custom::IotDetachPolices
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                IotThingPolicy: !Ref IotThingPolicy

    ################################################################################
    #
    # Service Backlog Stack
    #
    ################################################################################
    ServiceBacklogStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub [
                "https://${x0}${x1}.s3.amazonaws.com/${x2}/${x3}", {
                    x0: !FindInMap [
                        "Solution",
                        "Template",
                        "S3Bucket"
                    ],
                    x1: !If [
                        bSingleRegion,
                        "",
                        !Sub "-${AWS::Region}"
                    ],
                    x2: !FindInMap [
                        "Solution",
                        "Template",
                        "KeyPrefix"
                    ],
                    x3: !FindInMap [
                        "Solution",
                        "Template",
                        "ServiceBacklog"
                    ]
                }
            ]
            Parameters:
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                RootStackName: !GetAtt SanitizedStackName.OutputString
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                KeyPrefix: !FindInMap [
                    "Solution",
                    "Template",
                    "KeyPrefix"
                ]
                IngestBucket: !GetAtt BucketStack.Outputs.IngestBucket
                ProxyBucket: !GetAtt BucketStack.Outputs.ProxyBucket
                AwsSdkLayer: !Ref AwsSdkLayer

    ################################################################################
    #
    # Ingest Workflow Stack
    #
    ################################################################################
    IngestWorkflowStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub [
                "https://${x0}${x1}.s3.amazonaws.com/${x2}/${x3}", {
                    x0: !FindInMap [
                        "Solution",
                        "Template",
                        "S3Bucket"
                    ],
                    x1: !If [
                        bSingleRegion,
                        "",
                        !Sub "-${AWS::Region}"
                    ],
                    x2: !FindInMap [
                        "Solution",
                        "Template",
                        "KeyPrefix"
                    ],
                    x3: !FindInMap [
                        "Solution",
                        "Template",
                        "IngestWorkflow"
                    ]
                }
            ]
            Parameters:
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                RootStackName: !GetAtt SanitizedStackName.OutputString
                SolutionUuid: !GetAtt CreateSolutionUuid.Uuid
                AnonymousUsage: !FindInMap [
                    "AnonymousData",
                    "SendAnonymousData",
                    "Data"
                ]
                CustomResourceArn: !GetAtt CustomResourceFunction.Arn
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                KeyPrefix: !FindInMap [
                    "Solution",
                    "Template",
                    "KeyPrefix"
                ]
                IngestBucket: !GetAtt BucketStack.Outputs.IngestBucket
                ProxyBucket: !GetAtt BucketStack.Outputs.ProxyBucket
                SNSTopicArn: !Ref SNSTopic
                ElasticsearchDomainName: !GetAtt SearchEngineStack.Outputs.DomainName
                ElasticsearchDomainEndpoint: !GetAtt SearchEngineStack.Outputs.DomainEndpoint
                ElasticsearchDomainIndexName: !GetAtt SearchEngineStack.Outputs.IndexName
                # IoT
                IotTopic: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}/status", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                IotHost: !GetAtt IotUrl.Endpoint
                # layers
                AwsSdkLayer: !Ref AwsSdkLayer
                CoreLibLayer: !Ref CoreLibLayer
                CanvasLibLayer: !Ref CanvasLibLayer

    ################################################################################
    #
    # Analysis Workflow Stack
    #
    ################################################################################
    AnalysisWorkflowStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub [
                "https://${x0}${x1}.s3.amazonaws.com/${x2}/${x3}", {
                    x0: !FindInMap [
                        "Solution",
                        "Template",
                        "S3Bucket"
                    ],
                    x1: !If [
                        bSingleRegion,
                        "",
                        !Sub "-${AWS::Region}"
                    ],
                    x2: !FindInMap [
                        "Solution",
                        "Template",
                        "KeyPrefix"
                    ],
                    x3: !FindInMap [
                        "Solution",
                        "Template",
                        "AnalysisWorkflow"
                    ]
                }
            ]
            Parameters:
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                RootStackName: !GetAtt SanitizedStackName.OutputString
                SolutionUuid: !GetAtt CreateSolutionUuid.Uuid
                AnonymousUsage: !FindInMap [
                    "AnonymousData",
                    "SendAnonymousData",
                    "Data"
                ]
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                KeyPrefix: !FindInMap [
                    "Solution",
                    "Template",
                    "KeyPrefix"
                ]
                IngestBucket: !GetAtt BucketStack.Outputs.IngestBucket
                ProxyBucket: !GetAtt BucketStack.Outputs.ProxyBucket
                SNSTopicArn: !Ref SNSTopic
                ElasticsearchDomainName: !GetAtt SearchEngineStack.Outputs.DomainName
                ElasticsearchDomainEndpoint: !GetAtt SearchEngineStack.Outputs.DomainEndpoint
                ElasticsearchDomainIndexName: !GetAtt SearchEngineStack.Outputs.IndexName
                IotHost: !GetAtt IotUrl.Endpoint
                IotTopic: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}/status", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                # AI/ML
                AIOptions: !Select [
                    0,
                    !Split [
                        ")",
                        !Select [
                            1,
                            !Split [
                                "(",
                                !Ref AIOptions
                            ]
                        ]
                    ]
                ]
                MinConfidence: !FindInMap [
                    "AIML",
                    "Options",
                    "MinConfidence"
                ]
                # layers
                AwsSdkLayer: !Ref AwsSdkLayer
                CoreLibLayer: !Ref CoreLibLayer
                CanvasLibLayer: !Ref CanvasLibLayer
                # Service Backlog
                BacklogLibLayerArn: !GetAtt ServiceBacklogStack.Outputs.BacklogLibLayerArn
                BacklogTable: !GetAtt ServiceBacklogStack.Outputs.BacklogTable
                BacklogEBBus: !GetAtt ServiceBacklogStack.Outputs.BacklogEBBus
                BacklogTopicArn: !GetAtt ServiceBacklogStack.Outputs.BacklogTopicArn
                BacklogTopicRoleArn: !GetAtt ServiceBacklogStack.Outputs.BacklogTopicRoleArn
                BacklogServiceDataAccessRoleArn: !GetAtt ServiceBacklogStack.Outputs.BacklogServiceDataAccessRoleArn
                AtomicLockTable: !GetAtt ServiceBacklogStack.Outputs.AtomicLockTable
                CustomLabelsStateMachineArn: !GetAtt ServiceBacklogStack.Outputs.CustomLabelsStateMachineArn

    ################################################################################
    #
    # Main Workflow (state machine to run ingest and analysis)
    #
    ################################################################################
    MainStateMachineServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -
                    Effect: "Allow"
                    Action: "sts:AssumeRole"
                    Principal:
                        Service: !Sub "states.${AWS::Region}.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${SanitizedStackName.OutputString}-main-role", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "Id"
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "states:StartExecution"
                                Resource:
                                    - !GetAtt IngestWorkflowStack.Outputs.MainStateMachineArn
                                    - !GetAtt AnalysisWorkflowStack.Outputs.MainStateMachineArn
                            -
                                Effect: "Allow"
                                Action:
                                    - "states:DescribeExecution"
                                    - "states:StopExecution"
                                Resource:
                                    - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${IngestWorkflowStack.Outputs.MainStateMachineName}:*"
                                    - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${AnalysisWorkflowStack.Outputs.MainStateMachineName}:*"
                            -
                                Effect: "Allow"
                                Action:
                                    - "events:PutTargets"
                                    - "events:PutRule"
                                    - "events:DescribeRule"
                                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"

    MainStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ],
                    x1: !FindInMap [
                        "Workflow",
                        "Main",
                        "Name"
                    ]
                }
            ]
            RoleArn: !GetAtt MainStateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "main state machine to run ingest and anlysis sub state machines",
                            "StartAt": "Start ingest state machine",
                            "States": {
                                "Start ingest state machine": {
                                    "Type": "Task",
                                    "Resource": "arn:aws:states:::states:startExecution.sync",
                                    "Parameters": {
                                        "Input": {
                                            "input.$": "$.input"
                                        },
                                        "StateMachineArn": "${IngestStateMachine}"
                                    },
                                    "ResultSelector": {
                                        "ingestOutput.$": "States.StringToJson($.Input)"
                                    },
                                    "Next": "Start analysis state machine"
                                },
                                "Start analysis state machine": {
                                    "Type": "Task",
                                    "Resource": "arn:aws:states:::states:startExecution.sync",
                                    "Parameters": {
                                        "Input": {
                                            "uuid.$": "$.ingestOutput.input.uuid",
                                            "input.$": "$.ingestOutput.input"
                                        },
                                        "StateMachineArn": "${AnalysisStateMachine}"
                                    },
                                    "End": true
                                }
                            }
                        }
                    -
                        {
                            IngestStateMachine: !GetAtt IngestWorkflowStack.Outputs.MainStateMachineArn,
                            AnalysisStateMachine: !GetAtt AnalysisWorkflowStack.Outputs.MainStateMachineArn
                        }

    ################################################################################
    #
    # CloudWatch Event (State Machine Error Handling)
    #
    ################################################################################
    StateMachineErrorHandlerFunctionLogGroup:
        Type: AWS::Logs::LogGroup
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W84
                        reason: "Disable log encryption in Preview version"
        Properties:
            LogGroupName: !Sub [
                "/aws/lambda/${x0}-${SanitizedStackName.OutputString}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ],
                    x1: !FindInMap [
                        "Workflow",
                        "ErrorHandler",
                        "Name"
                    ]
                }
            ]
            RetentionInDays: 7

    StateMachineErrorHandlerFunctionRole:
        Type: AWS::IAM::Role
        DependsOn:
            - MainStateMachine
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${SanitizedStackName.OutputString}-error-handler-policy", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "Id"
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## CloudWatch Logs
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !GetAtt StateMachineErrorHandlerFunctionLogGroup.Arn
                            ## Step Functions
                            -
                                Effect: "Allow"
                                Action: "states:DescribeStateMachine"
                                Resource:
                                    - !Sub [
                                        "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${x0}-${SanitizedStackName.OutputString}-*", {
                                            x0: !FindInMap [
                                                "Solution",
                                                "Project",
                                                "Id"
                                            ]
                                        }
                                    ]
                            -
                                Effect: "Allow"
                                Action:
                                    - "states:DescribeExecution"
                                    - "states:GetExecutionHistory"
                                Resource:
                                    - !Sub [
                                        "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${x0}-${SanitizedStackName.OutputString}-*:*", {
                                            x0: !FindInMap [
                                                "Solution",
                                                "Project",
                                                "Id"
                                            ]
                                        }
                                    ]
                            ## IoT
                            -
                                Effect: "Allow"
                                Action:
                                    - "iot:Publish"
                                Resource:
                                    - !Sub [
                                        "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${x0}-${SanitizedStackName.OutputString}/status", {
                                            x0: !FindInMap [
                                                "Solution",
                                                "Project",
                                                "Id"
                                            ]
                                        }
                                    ]
                            ## SNS
                            -
                                Effect: "Allow"
                                Action: "sns:Publish"
                                Resource: !Ref SNSTopic
                            ## DynamoDB - allow to update executions column on ingest table
                            -
                                Effect: "Allow"
                                Action:
                                    - "dynamodb:DeleteItem"
                                    - "dynamodb:DescribeTable"
                                    - "dynamodb:Query"
                                    - "dynamodb:UpdateItem"
                                Resource:
                                    - !GetAtt IngestWorkflowStack.Outputs.IngestTableArn
                                    - !GetAtt AnalysisWorkflowStack.Outputs.StatsTableArn

    StateMachineErrorHandlerFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ],
                    x1: !FindInMap [
                        "Workflow",
                        "ErrorHandler",
                        "Name"
                    ]
                }
            ]
            Description: !Sub [
                "(${x0}) state machine error handling (128MB)", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 128
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt StateMachineErrorHandlerFunctionRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Workflow",
                            "ErrorHandler",
                            "Package"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                    ENV_STACKNAME: !GetAtt SanitizedStackName.OutputString
                    ENV_SOLUTION_UUID: !GetAtt CreateSolutionUuid.Uuid
                    ENV_ANONYMOUS_USAGE: !FindInMap [
                        "AnonymousData",
                        "SendAnonymousData",
                        "Data"
                    ]
                    ENV_IOT_HOST: !GetAtt IotUrl.Endpoint
                    ENV_IOT_TOPIC: !Sub [
                        "${x0}-${SanitizedStackName.OutputString}/status", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "Id"
                            ]
                        }
                    ]
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopic
                    ENV_INGEST_BUCKET: !GetAtt BucketStack.Outputs.IngestBucket
                    ENV_PROXY_BUCKET: !GetAtt BucketStack.Outputs.ProxyBucket

    StateMachineErrorStatusEvent:
        Type: AWS::Events::Rule
        Properties:
            Name: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-state-machine-error-handler", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            Description: !Sub [
                "(${x0}) state machine error handler", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            EventPattern:
                source:
                    - "aws.states"
                detail-type:
                    - "Step Functions Execution Status Change"
                detail:
                    status:
                        - FAILED
                        - ABORTED
                        - TIMED_OUT
                    stateMachineArn:
                        - !GetAtt IngestWorkflowStack.Outputs.MainStateMachineArn
                        - !GetAtt AnalysisWorkflowStack.Outputs.MainStateMachineArn
            State: ENABLED
            Targets:
                -
                    Id: !Sub "Id-${StateMachineErrorHandlerFunction}"
                    Arn: !GetAtt StateMachineErrorHandlerFunction.Arn

    PermissionToInvokeLambda:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref StateMachineErrorHandlerFunction
            Action: lambda:InvokeFunction
            Principal: events.amazonaws.com
            SourceArn: !GetAtt StateMachineErrorStatusEvent.Arn

    ################################################################################
    #
    # API Gateway related resources
    #
    ################################################################################
    Media2CloudApiGatewayStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub [
                "https://${x0}${x1}.s3.amazonaws.com/${x2}/media2cloud-api-stack.template", {
                    x0: !FindInMap [
                        "Solution",
                        "Template",
                        "S3Bucket"
                    ],
                    x1: !If [
                        bSingleRegion,
                        "",
                        !Sub "-${AWS::Region}"
                    ],
                    x2: !FindInMap [
                        "Solution",
                        "Template",
                        "KeyPrefix"
                    ]
                }
            ]
            Parameters:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                KeyPrefix: !FindInMap [
                    "Solution",
                    "Template",
                    "KeyPrefix"
                ]
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
                RootStackName: !GetAtt SanitizedStackName.OutputString
                SolutionUuid: !GetAtt CreateSolutionUuid.Uuid
                AnonymousUsage: !FindInMap [
                    "AnonymousData",
                    "SendAnonymousData",
                    "Data"
                ]
                ApiGatewayEndpointName: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}-api", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                StageName: !FindInMap [
                    "Solution",
                    "APIGateway",
                    "StageName"
                ]
                MainStateMachine: !GetAtt MainStateMachine.Name
                IngestStateMachine: !GetAtt IngestWorkflowStack.Outputs.MainStateMachineName
                AnalysisStateMachine: !GetAtt AnalysisWorkflowStack.Outputs.MainStateMachineName
                IotThingPolicy: !Ref IotThingPolicy
                IotHost: !GetAtt IotUrl.Endpoint
                IotTopic: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}/status", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                # AI/ML
                AIOptions: !Select [
                    0,
                    !Split [
                        ")",
                        !Select [
                            1,
                            !Split [
                                "(",
                                !Ref AIOptions
                            ]
                        ]
                    ]
                ]
                MinConfidence: !FindInMap [
                    "AIML",
                    "Options",
                    "MinConfidence"
                ]
                # layers
                AwsSdkLayer: !Ref AwsSdkLayer
                CoreLibLayer: !Ref CoreLibLayer
                IngestBucket: !GetAtt BucketStack.Outputs.IngestBucket
                ProxyBucket: !GetAtt BucketStack.Outputs.ProxyBucket
                # elasticsearch
                ElasticsearchDomainName: !GetAtt SearchEngineStack.Outputs.DomainName
                ElasticsearchDomainEndpoint: !GetAtt SearchEngineStack.Outputs.DomainEndpoint
                ElasticsearchDomainIndexName: !GetAtt SearchEngineStack.Outputs.IndexName

    ################################################################################
    #
    # Cognito related resources
    #
    ################################################################################
    #
    # Cognito Identity Pool Name can only contain letters, underscores, space, 128 characters
    #
    SanitizeIdentityPoolName:
        Type: Custom::StringManipulation
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                InputString: !Sub [
                    "${x0}-${SanitizedStackName.OutputString}-identitypool", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "Id"
                        ]
                    }
                ]
                Operations: "underscore,maxlen=127"
                OutputReference: CognitoIdentityPoolName

    #
    # Cognito User pool
    #
    UserPool:
        Type: "AWS::Cognito::UserPool"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: F78
                        reason: "Disable MFA check"
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
                InviteMessageTemplate:
                  EmailSubject: "You are invited to AWS Media2Cloud demo portal"
                  EmailMessage:
                    !Sub
                        - |-
                            <html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schema=s-microsoft-com:office:word" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns="http://www.w3.org/TR/REC-html40">
                            <head>
                            <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                            <meta name="Generator" content="Microsoft Word 15 (filtered medium)">
                            <style>
                                @font-face {
                                font-family: "Cambria Math"; panose-1: 2 4 5 3 5 4 6 3 2 4;
                                }
                                @font-face {
                                font-family: DengXian; panose-1: 2 1 6 0 3 1 1 1 1 1;
                                }
                                @font-face {
                                font-family: Calibri; panose-1: 2 15 5 2 2 2 4 3 2 4;
                                }
                                @font-face {
                                font-family: "@DengXian"; panose-1: 2 1 6 0 3 1 1 1 1 1;
                                }
                                @font-face {
                                font-family: "Amazon Ember"; panose-1: 2 11 6 3 2 2 4 2 2 4;
                                }

                                p.MsoNormal, li.MsoNormal, div.MsoNormal {
                                margin: 0in;
                                margin-bottom: .0001pt;
                                font-size: 12.0pt;
                                font-family: "Calibri", sans-serif;
                                }

                                h2 {
                                mso-style-priority: 9;
                                mso-style-link: "Heading 2 Char";
                                mso-margin-top-alt: auto;
                                margin-right: 0in;
                                mso-margin-bottom-alt: auto;
                                margin-left: 0in;
                                font-size: 18.0pt;
                                font-family: "Calibri", sans-serif;
                                font-weight: bold;
                                }

                                a, span.MsoHyperlink {
                                mso-style-priority: 99;
                                color: #0563C1;
                                }

                                span.EmailStyle17 {
                                mso-style-type: personal-compose;
                                font-family: "Calibri", sans-serif;
                                color: windowtext;
                                }

                                span.Heading2Char {
                                mso-style-name: "Heading 2 Char";
                                mso-style-priority: 9;
                                mso-style-link: "Heading 2";
                                font-family: "Calibri", sans-serif;
                                font-weight: bold;
                                }

                                .MsoChpDefault {
                                mso-style-type: export-only;
                                font-family: "Calibri", sans-serif;
                                }

                                @page WordSection1 {
                                size: 8.5in 11.0in;
                                margin: 1.0in 1.0in 1.0in 1.0in;
                                }

                                div.WordSection1 {
                                page: WordSection1;
                                }

                                .MainContent {
                                font-variant-ligatures: normal;
                                font-variant-caps: normal;
                                orphans:2;
                                text-align:start;
                                widows:2;
                                -webkit-text-stroke-width: 0px;
                                text-decoration-style:initial;
                                text-decoration-color:initial;
                                word-spacing:0px;
                                font-size:13.5pt;
                                }

                                .SubContent {
                                font-family:'Amazon Ember',sans-serif;
                                color:#333333"
                                }
                            </style>
                            </head>

                            <body lang="EN-US" link="#0563C1" vlink="#954F72">
                            <div class="WordSection1">
                                <h2>
                                <span class="SubContent">
                                    Welcome to AWS Media2Cloud demo portal<o:p></o:p>
                                </span>
                                </h2>

                                <p class="MainContent" style="padding-bottom:30px;">
                                <span class="SubContent">
                                    You will need this user name and temporary password to log in the first time.<o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent">
                                <span class="SubContent">
                                    User name: <b>{username}</b><o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent">
                                <span class="SubContent">
                                    Temporary password: <b>{####}</b><o:p></o:p>
                                </span>
                                <br/>
                                <span class="SubContent" style="font-size:10pt;">
                                    (After you log in with your temporary password, you will be prompted to create a new one.)<o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent" style="padding-bottom:30px;">
                                <span class="SubContent">
                                    Open the link to log in:<o:p></o:p>
                                    <br/>
                                    <span style="color:#007DBC">
                                        <a href="${url}" target="_blank">${url}</a><o:p></o:p>
                                    </span>
                                </span>
                                </p>

                                <h2>
                                <span class="SubContent">
                                    Information you need to know<o:p></o:p>
                                </span>
                                </h2>

                                <p class="MainContent">
                                <span class="SubContent">
                                    S3 Bucket where content is ingested:<o:p></o:p>
                                    <br/>
                                    <b>${ingest}</b><o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent">
                                <span class="SubContent">
                                    S3 Bucket where proxies and metadata are stored:<o:p></o:p>
                                    <br/>
                                    <b>${proxy}</b><o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent" style="padding-top: 30pt;">
                                <span class="SubContent" style="font-size:12pt;">
                                    <i>Team AWS Media2Cloud</i><o:p></o:p>
                                </span>
                                </p>

                                <p class="MsoNormal">
                                <span style="font-size:11.0pt">
                                    <o:p>&nbsp;</o:p>
                                </span>
                                </p>
                            </div>
                            </body>
                            </html>
                        - {
                            url: !GetAtt WebAppStack.Outputs.WebsiteUrl,
                            ingest: !GetAtt BucketStack.Outputs.IngestBucket,
                            proxy: !GetAtt BucketStack.Outputs.ProxyBucket
                        }
            AliasAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireSymbols: false
                    RequireUppercase: true
            UserPoolName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-userpool", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]

    #
    # Cognito App client
    #
    AppClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            ClientName: !Sub [
                "${x0}-${SanitizedStackName.OutputString}-app", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "Id"
                    ]
                }
            ]
            RefreshTokenValidity: 30
            UserPoolId: !Ref UserPool

    #
    # Cognito Identity pool
    #
    IdentityPool:
        Type: "AWS::Cognito::IdentityPool"
        Properties:
            IdentityPoolName: !GetAtt SanitizeIdentityPoolName.OutputString
            AllowUnauthenticatedIdentities: false
            CognitoIdentityProviders:
                -
                  ClientId: !Ref AppClient
                  ProviderName: !GetAtt UserPool.ProviderName
                  ServerSideTokenCheck: false

    #
    # Cognito Authenticated user IAM role
    #
    AuthenticatedRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as the authenticated cognito role needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Federated: "cognito-identity.amazonaws.com"
                        Action:
                            - "sts:AssumeRoleWithWebIdentity"
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: "authenticated"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${SanitizedStackName.OutputString}-CognitoAuthUser", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "Id"
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## Cognito
                            -
                                Effect: "Allow"
                                Action:
                                    - "cognito-identity:GetId"
                                Resource: [
                                    !Sub "arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}"
                                ]

                            ## S3
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                    - "s3:ListBucket"
                                Resource:
                                    - !Sub "arn:aws:s3:::${BucketStack.Outputs.IngestBucket}"
                                    - !Sub "arn:aws:s3:::${BucketStack.Outputs.IngestBucket}/*"
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                    - "s3:ListBucket"
                                Resource:
                                    - !Sub "arn:aws:s3:::${BucketStack.Outputs.ProxyBucket}"
                                    - !Sub "arn:aws:s3:::${BucketStack.Outputs.ProxyBucket}/*"

                            ## API Gateway
                            -
                                Effect: "Allow"
                                Action:
                                    - "execute-api:Invoke"
                                Resource:
                                    - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Media2CloudApiGatewayStack.Outputs.ApiId}/*/*/*"

                            ## IoT
                            -
                                Effect: Allow
                                Action:
                                    - "iot:Connect"
                                Resource:
                                    - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*"
                            -
                                Effect: Allow
                                Action:
                                    - "iot:Subscribe"
                                Resource:
                                    - !Sub [
                                        "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${x0}-${SanitizedStackName.OutputString}/status", {
                                            x0: !FindInMap [
                                                "Solution",
                                                "Project",
                                                "Id"
                                            ]
                                        }
                                    ]
                            -
                                Effect: Allow
                                Action:
                                    - "iot:Receive"
                                Resource:
                                    - !Sub [
                                        "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${x0}-${SanitizedStackName.OutputString}/status", {
                                            x0: !FindInMap [
                                                "Solution",
                                                "Project",
                                                "Id"
                                            ]
                                        }
                                    ]

    #
    # Cognito attached IAM role to Identity pool
    #
    IdentityPoolRoleAttachment:
        Type: "AWS::Cognito::IdentityPoolRoleAttachment"
        Properties:
            IdentityPoolId: !Ref IdentityPool
            Roles:
                authenticated: !GetAtt AuthenticatedRole.Arn

    #
    # Register Cognito user
    #
    RegisterUser:
        DependsOn: UpdateManifest
        Type: Custom::RegisterUser
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            Data:
                UserPoolId: !Ref UserPool
                Email: !Ref Email

Outputs:
    ## Layers
    AwsSdkLayer:
        Value : !Sub [
            "https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/layers/${x0}/versions/${x1}", {
                x0: !Select [
                    6,
                    !Split [
                        ":",
                        !Ref AwsSdkLayer
                    ]
                ],
                x1: !Select [
                    7,
                    !Split [
                        ":",
                        !Ref AwsSdkLayer
                    ]
                ]
            }
        ]
        Description: Lambda Layer (Latest AWS SDK)
    CoreLibLayer:
        Value : !Sub [
            "https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/layers/${x0}/versions/${x1}", {
                x0: !Select [
                    6,
                    !Split [
                        ":",
                        !Ref CoreLibLayer
                    ]
                ],
                x1: !Select [
                    7,
                    !Split [
                        ":",
                        !Ref CoreLibLayer
                    ]
                ]
            }
        ]
        Description: Lambda Layer (Core Library)
    CanvasLibLayer:
        Value : !Sub [
            "https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/layers/${x0}/versions/${x1}", {
                x0: !Select [
                    6,
                    !Split [
                        ":",
                        !Ref CanvasLibLayer
                    ]
                ],
                x1: !Select [
                    7,
                    !Split [
                        ":",
                        !Ref CanvasLibLayer
                    ]
                ]
            }
        ]
        Description: Lambda Layer (Node Canvas Library)
    ## Custom Resource related
    CustomResourceExecutionRoleArn:
        Value: !GetAtt CustomResourceExecutionRole.Arn
        Description: Role Arn (Custom Resource)
    CustomResourceName:
        Value: !Ref CustomResourceFunction
        Description: Lambda Name (Custom Resource)
    CustomResourceArn:
        Value: !GetAtt CustomResourceFunction.Arn
        Description: Lambda Arn (Custom Resource)
    ## Buckets
    IngestBucket:
        Value: !GetAtt BucketStack.Outputs.IngestBucket
        Description: Bucket (Ingest)
    ProxyBucket:
        Value: !GetAtt BucketStack.Outputs.ProxyBucket
        Description: Bucket (Proxy)
    WebBucket:
        Value: !GetAtt BucketStack.Outputs.WebBucket
        Description: Bucket (Web)
    ## Search engine
    ElasticsearchDomainName:
        Value: !GetAtt SearchEngineStack.Outputs.DomainName
        Description: "Elasticsearch Domain Name (Search Engine)"
    ElasticsearchDomainEndpoint:
        Value: !GetAtt SearchEngineStack.Outputs.DomainEndpoint
        Description: "Elasticsearch Domain Endpoint (Search Engine)"
    ElasticsearchIndexName:
        Value: !GetAtt SearchEngineStack.Outputs.IndexName
        Description: "Elasticsearch Index Document Name (Search Engine)"
    ## SNS related
    SNSTopicName:
        Value: !GetAtt SNSTopic.TopicName
        Description: Topic Name (SNS)
    SNSTopicArn:
        Value: !Ref SNSTopic
        Description: Topic Arn (SNS)
    ## Iot related
    IotThingName:
        Value: !Ref IotThing
        Description: Iot Thing Name
    IotThingPolicy:
        Value: !Ref IotThingPolicy
        Description: Iot Thing Policy Name
    IotThingPolicyArn:
        Value: !GetAtt IotThingPolicy.Arn
        Description: Iot Thing Policy Arn
    IotTopic:
        Value: !Sub [
            "${x0}-${SanitizedStackName.OutputString}/status", {
                x0: !FindInMap [
                    "Solution",
                    "Project",
                    "Id"
                ]
            }
        ]
        Description: Iot Message Topic
    ## State machine related
    Media2CloudMainStateMachineArn:
        Value: !Ref MainStateMachine
        Description: State Machine Arn (Media2Cloud Main)
    Media2CloudMainStateMachineName:
        Value: !GetAtt MainStateMachine.Name
        Description: State Machine Name (Media2Cloud Main)
    Media2CloudIngestStateMachineArn:
        Value: !GetAtt IngestWorkflowStack.Outputs.MainStateMachineArn
        Description: State Machine Arn (Media2Cloud Ingest)
    Media2CloudIngestStateMachineName:
        Value: !GetAtt IngestWorkflowStack.Outputs.MainStateMachineName
        Description: State Machine Name (Media2Cloud Ingest)
    Media2CloudAnalysisStateMachineArn:
        Value: !GetAtt AnalysisWorkflowStack.Outputs.MainStateMachineArn
        Description: State Machine Arn (Media2Cloud Analysis)
    Media2CloudAnalysisStateMachineName:
        Value: !GetAtt AnalysisWorkflowStack.Outputs.MainStateMachineName
        Description: State Machine Name (Media2Cloud Analysis)
    ## CloudWatch Event (State machine error handling)
    StateMachineErrorHandlerFunctionRoleArn:
        Value: !GetAtt StateMachineErrorHandlerFunctionRole.Arn
        Description: Role Arn (State Machine Error Handler)
    StateMachineErrorHandlerFunctionArn:
        Value: !GetAtt StateMachineErrorHandlerFunction.Arn
        Description: Lambda Arn (State Machine Error Handler)
    StateMachineErrorStatusEventArn:
        Value: !GetAtt StateMachineErrorStatusEvent.Arn
        Description: CloudWatch Rule Arn (State Machine Error Handler)
    ## API Gateway related
    Media2CloudApiId:
        Value: !GetAtt Media2CloudApiGatewayStack.Outputs.ApiId
        Description: API Id (Media2Cloud)
    Media2CloudEndpoint:
        Value: !GetAtt Media2CloudApiGatewayStack.Outputs.Endpoint
        Description: API Endpoint (Media2Cloud)
    ## Cognito related
    CognitoUserPoolId:
        Value: !Ref UserPool
        Description: "User Pool ID (Cognito)"
    CognitoUserPoolArn:
        Value: !GetAtt UserPool.Arn
        Description: "User Pool Arn (Cognito)"
    CognitoUserPoolProviderName:
        Value: !GetAtt UserPool.ProviderName
        Description: "User Pool Provider Name (Cognito)"
    CognitoUserPoolProviderURL:
        Value: !GetAtt UserPool.ProviderURL
        Description: "User Pool Provider Url (Cognito)"
    CognitoAppClientId:
        Value: !Ref AppClient
        Description: "App Client ID (Cognito)"
    CognitoIdentityPoolId:
        Value: !Ref IdentityPool
        Description: "Identity Pool (Cognito)"
    CognitoIdentityPoolName:
        Value: !GetAtt IdentityPool.Name
        Description: "Identity Pool Name (Cognito)"
    CognitoRegisterUser:
        Value: !GetAtt RegisterUser.Username
        Description: "Registered Username (Cognito)"
    ## WebApp related
    DistributionId:
        Value: !GetAtt WebAppStack.Outputs.DistributionId
        Description: Id (CloudFront Distribution)
    HomePageUrl:
        Value: !GetAtt WebAppStack.Outputs.WebsiteUrl
        Description: "Home Page Url (WebApp)"
    ## Misc.
    SanitizedStackName:
        Value: !GetAtt SanitizedStackName.OutputString
        Description: Stack Name (Sanitized)
    RandomizedName:
        Value: !GetAtt RandomizedName.OutputString
        Description: Name (Randomize for prefixing resource)
